<div class="product-details-container">
  <div class="table">
    <div class="image-box">
      {{!-- <div class="thumbnails">
        <img src="" />
        <img src="" />
        <img src="" />
        <img src="" />
        <img src="" />
      </div> --}}

      <div class="image">
        <img src="{{newProduct.img.path}}" />
      </div>
    </div>
    
    <div class="details-box">
      <div class="title">
        <h3>{{newProduct.brand}}</h3>
        <h1>{{newProduct.name}}</h1>
        <h4 id="product-old-price"><del>{{newProduct.oldPrice}}đ</del></h4>
        <h3 id="product-price">{{newProduct.price}}đ</h3>
      </div>
      
      <div class="description">
        <p>{{newProduct.description}}</p>
      </div>

      <div class="quantity">
        <i class="fi fi-rr-minus-circle"></i>
        <p></p>
        <i class="fi fi-rr-add"></i>
      </div>

      <div class="button">
        <div class="add-to-cart">
          <p>Thêm Vào Giỏ</p>
        </div>
        
        <div class="buy-now">
          <a href="/all-orders">
            <p>Mua Ngay</p> 
          </a>
        </div>
        <div class="out-of-order">
          <p>Hết Hàng</p>
        </div>
      </div>
    </div>
  </div>

  <div class="more-details">
    <h3>Thông tin sản phẩm</h3>
    <p>{{newProduct.details}}</p>
  </div>

  <div class="related-products">
    <div class="title">
      <a href="/all-products/{{newProduct.categories}}/{{newProductType}}" class="main-title"><b>Sản phẩm tương tự</b></a>
    </div>

    <div class="products">
      {{#each relatedProducts}}
      <a href="/product/{{this.slug}}">
        <div class="product">
          <img src="{{this.img.path}}" alt="" id="product-1">
          <p id="product-old-price"><del>{{this.oldPrice}}đ </del></p>
          <p id="product-price">{{this.price}}đ</p>
          <p id="product-details">{{this.name}}</p>
        </div>
      </a>
      {{/each}}
    </div>
  </div>
</div>

<script>
  var getAddToCart        = document.querySelector('div.add-to-cart')
  var getBuyNow           = document.querySelector('div.buy-now')
  var getOutOfOrder       = document.querySelector('div.out-of-order')
  var addToCartText       = getAddToCart.querySelector('p')
  var getQuantityDiv      = document.querySelector('div.quantity')
  var getIncreaseQuantity = document.querySelector('i.fi-rr-add')
  var getDecreaseQuantity = document.querySelector('i.fi-rr-minus-circle')
  var getQuantityValue    = document.querySelector('div.quantity').querySelector('p')
  
  // set default quantity value to 0 on first load and hidden the quantity div
  getQuantityValue.innerText = 0
  getQuantityDiv.style.visibility = 'hidden'

  // display out-of-order if true
  if (`{{newProduct.status}}` === 'out-of-order') {
    getAddToCart.style.display = 'none'
    getBuyNow.style.display = 'none'
    getOutOfOrder.style.display = 'flex'
  }
  
  // get obj from storage first, if not created, return {}
  var myObjFromStorage = JSON.parse(localStorage.getItem('product_cart_count')) || {
    localCounting: 0,
    productInfo: []
  }

  var myObj = {
    localCounting: myObjFromStorage.localCounting || 0,
    productInfo: myObjFromStorage.productInfo || []
  } 
  
  // set value to the myObj, stringify because localStorage only store string type
  localStorage.setItem('product_cart_count', JSON.stringify(myObj))
  {{!-- myObj.localCounting = myObjFromStorage.localCounting
  myObj.productInfo = myObjFromStorage.productInfo --}}

  // check if the item has already been added, return the button type to added
  var listProductLength = typeof myObj.productInfo === 'undefined' ? 0 : myObj.productInfo.length
  for (let i = 0; i < listProductLength; ++i) {
    if (myObj.productInfo[i].slug === `{{newProduct.slug}}`) {
      // change button color to 'added button'
      getAddToCart.style.backgroundColor = '#D1A6A6'
      addToCartText.style.color = 'white'

      // visible the quantity div
      getQuantityDiv.style.visibility = 'visible'
      getQuantityValue.innerText = myObj.productInfo[i].quantity 
      break
    } 
  }

  // increase quantity onclick
  getIncreaseQuantity.onclick = function () {
    // increase the quantity on page
    getQuantityValue.innerText++
    listProductLength = myObj.productInfo.length
    for (let i = 0; i < listProductLength; ++i) {
      if (myObj.productInfo[i].slug === `{{newProduct.slug}}`) {
        // store the quantity on page to localStorage
        myObj.productInfo[i].quantity = getQuantityValue.innerText
        localStorage.setItem('product_cart_count', JSON.stringify(myObj));
      }
    }
  }

  // decrease quantity onclick and min = 1
  getDecreaseQuantity.onclick = function () {
    for (let i = 0; i < listProductLength; ++i) {
      if (myObj.productInfo[i].slug === `{{newProduct.slug}}`) {
        if (getQuantityValue.innerText === '1') {
          getQuantityValue.innerText = 1
          myObj.productInfo[i].quantity = 1
        } else {
          getQuantityValue.innerText--
          myObj.productInfo[i].quantity = getQuantityValue.innerText
        }
        localStorage.setItem('product_cart_count', JSON.stringify(myObj));
      }
    }
  }

  // change addToCart button behavior and increase or decrease the quantity onclick
  getAddToCart.onclick = function () {
    // the item has not yet been added, click to add
    if (getAddToCart.style.backgroundColor === '') {
      // change button color to 'added button'
      getAddToCart.style.backgroundColor = '#D1A6A6'
      addToCartText.style.color = 'white'

      // add 1 to the cartCounting and set the quantity value min = 1
      myObj.localCounting++
      getQuantityValue.innerText = 1
      getQuantityDiv.style.visibility = 'visible'
      
      // create new added product 
      var newProductInfo = {
        slug  : `{{newProduct.slug}}`,
        name  : `{{newProduct.name}}`,
        price : `{{newProduct.price}}`,
        image : `{{newProduct.img.path}}`,
        quantity: getQuantityValue.innerText
      };

      // store new added product to localStorage
      myObj.productInfo.push(newProductInfo)
    } else {
      // the item has already been added, click to remove
      // change button color to 'default button'
      getAddToCart.style.backgroundColor = ''
      addToCartText.style.color = '#D1A6A6'

      // minus 1 from the cartCounting and reset the productQuantity to 0
      myObj.localCounting--
      getQuantityValue.innerText = 0
      getQuantityDiv.style.visibility = 'hidden'

      // remove the product from the localStorage
      listProductLength = myObj.productInfo.length
      for (let i = 0; i < listProductLength; i++) {
        if (myObj.productInfo[i].slug === `{{newProduct.slug}}`) {
          myObj.productInfo.splice(i, 1)
          break
        }
      }
    }

    localStorage.setItem('product_cart_count', JSON.stringify(myObj));
    document.dispatchEvent(new CustomEvent('cartUpdated'));
  }

  // add immediately item to cart and redirect to the orders page
  getBuyNow.onclick = function () {
    if (getAddToCart.style.backgroundColor === '') {
      myObj.localCounting++
      getQuantityValue.innerText = 1
      getQuantityDiv.style.visibility = 'visible'

      var newProductInfo = {
        slug  : `{{newProduct.slug}}`,
        name  : `{{newProduct.name}}`,
        price : `{{newProduct.price}}`,
        image : `{{newProduct.img.path}}`,
        quantity: getQuantityValue.innerText
      };

      myObj.productInfo.push(newProductInfo)
      localStorage.setItem('product_cart_count', JSON.stringify(myObj));
    } else {

    }
  }
</script>